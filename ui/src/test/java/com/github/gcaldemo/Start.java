package com.github.gcaldemo;import org.eclipse.jetty.server.Connector;import org.eclipse.jetty.server.Server;import org.eclipse.jetty.server.bio.SocketConnector;import org.eclipse.jetty.server.handler.HandlerCollection;import org.eclipse.jetty.webapp.WebAppContext;public class Start {    public static void main(String[] args) {        Server server = createServer();        try {            System.out.println("Starting Jetty. Press any key to stop.");            server.start();            System.in.read();            System.out.println("Stopping Jetty.");            server.stop();            server.join();        } catch (Exception e) {            e.printStackTrace();            System.exit(-1);        }    }    private static Server createServer() {        Server server = new Server();        SocketConnector connector = new SocketConnector();        connector.setMaxIdleTime(1000 * 60 * 60);        connector.setSoLingerTime(-1);        connector.setPort(8080);        server.setConnectors(new Connector[] { connector });        WebAppContext bb = new WebAppContext();        bb.setServer(server);        bb.setContextPath("/");        bb.setWar("src/main/webapp");        HandlerCollection handlers = new HandlerCollection();        handlers.addHandler(bb);        server.setHandler(handlers);        return server;    }}